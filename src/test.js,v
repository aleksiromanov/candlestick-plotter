head	1.1;
access;
symbols;
locks
	alex:1.1; strict;
comment	@# @;


1.1
date	2019.03.19.14.48.17;	author alex;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@import fs from 'fs';
import drawCandleStick from 'draw-candlestick';
import csv from 'csv-parse';

const COLOR2 = 'red';
const WIDTH  =  1050
const HEIGHT =   500;
const NUBER_OF_CANDLES_PER_PICTURE = 32;
const BUY_SELL_TRESHOLD = 0.00007;
const SCV_FILE_PATH = 'DAT_ASCII_EURUSD_M1_201902-100.csv';
const LABLEL_FOR_BUY  = 'B';
const LABLEL_FOR_SELL = 'S';
const LABLEL_FOR_HOLD = 'H';

function drawCandleStick(input, green, red, width, height) {
    var width  = width;
    var height  = height;

    var Canvas = require('canvas').Canvas
        , Image = Canvas.Image
        , canvas = new Canvas(width, height)
        , ctx = canvas.getContext('2d');

    console.log(Canvas);

    var d3 = require('d3');
    var d3Scale = require("d3-scale")

    var ctx = canvas.getContext('2d');
    ctx.strokeRect(0,0, width, height);
    ctx.translate(0, height);
    ctx.scale(1,-1);


    var y = d3Scale.scaleLinear()
        .domain([d3.min(input.low), d3.max(input.high)])
        .range([50, height-50]);


    let barsCount   = input.close.length;
    let widthofBars = 20;
    let gapBetweenBars = 12;
    let leftOffset = 30;
    for(let i=0; i< barsCount ; i++) {
        let open = input.open[i];
        let high = input.high[i];
        let low  = input.low[i];
        let close= input.close[i];
        let height = Math.abs(y(open) - y(close));
        height = height > 0 ? height : 2;
        let xValue = leftOffset + ((widthofBars + gapBetweenBars)  * i);
        let colo;
        let start;
        if(open > close) {
            colo = red; //'#e86c57';
            start = y(close);
        } else {
            colo = green; //'#005700';
            start = y(open);
        }
        ctx.strokeStyle = colo;
        ctx.fillStyle = colo;
        ctx.beginPath();
        ctx.moveTo(xValue, y(high));
        ctx.lineTo(xValue, y(low));
        ctx.fillRect(xValue - (widthofBars/2), start, widthofBars, height);
        ctx.fill();
        ctx.stroke();
    }    
    return canvas.toBuffer()
}

class TicksPlotter {

    var COLOR1 = 'green';

    constructor()
    {
    }

    function analyse_input(input) {
        var n = input.high.length;
        for(var i = 0; i < n - NUBER_OF_CANDLES_PER_PICTURE; i ++) {
            var win = input.close[i + 1] - input.close[i];
            if(win > BUY_SELL_TRESHOLD) {
                input.label[i] = LABLEL_FOR_BUY;
            } else if(win * -1 > BUY_SELL_TRESHOLD) {
                input.label[i] = LABLEL_FOR_SELL;
            } else {
                input.label[i] = LABLEL_FOR_HOLD;
            }
        }
        return
    }

    function plot_input(input) {
        const N = input.high.length;
        for(var i = 0; i < N - NUBER_OF_CANDLES_PER_PICTURE; i++) {
            let ohlc = {};
            var x;
            for(x in input) {
                ohlc[x] = input[x].slice(i, i + NUBER_OF_CANDLES_PER_PICTURE);
            }
            const plot = drawCandleStick(ohlc, this.colorOfBullishCandle,
                                         this.colorOfBearishCandle, WIDTH, HEIGHT);
            const chartFilename = 'result-' + (1000000 + i) + '-' + input.label[i] + '.png';
            fs.writeFileSync(chartFilename, plot);
        }
    }

    function ticks_to_plot_input(ticks) {
        var open = [], high = [], low = [], close = [], label = [];
        for(var i in ticks) {
            var tick = ticks[i];
            open.push(tick[1]);
            high.push(tick[2]);
            low.push(tick[3]);
            close.push(tick[4]);
        }
        return {open: open, high: high, low: low, close: close, label: label};
    }

    function plot_ticks(ticks) {
        var input = ticks_to_plot_input(ticks);
        analyse_input(input);
        plot_input(input);
    }

    function main() {
        var ticks = [];
        fs  .createReadStream(SCV_FILE_PATH)
            .pipe(csv({'delimiter':';'}))
            .on('data', (tick) => ticks.push(tick))
            .on('end', () => plot_ticks(ticks));
    }
}

main();

@
